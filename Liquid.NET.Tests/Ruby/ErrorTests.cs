//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     Source: errors.txt
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Liquid.Ruby\writetest.rb
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Liquid.NET.Constants;
using Xunit;

namespace Liquid.NET.Tests.Ruby
{
    
    public class ErrorTests {

        [Theory]
        [InlineData(@"", @"")]
        [InlineData(@"{{ ""1"" | divided_by: ""0"" }}", @"Liquid error: divided by 0")]
        [InlineData(@"{% if 1 == woeifj %}EQUAL{% else %}NOT EQUAL{% endif %}", @"NOT EQUAL")]
        [InlineData(@"{% if user.payments == wfwefewf %}you never paid !{% endif %}", @"you never paid !")]
        [InlineData(@"{% if user == wfwefewf %}you never paid !{% endif %}", @"you never paid !")]
        [InlineData(@"{% if ""user"" == wfwefewf %}you never paid !{% endif %}", @"")]
        [InlineData(@"{% assign x = true %}{% if x == true %}TRUE{% else %}FALSE{% endif %}", @"TRUE")]
        [InlineData(@"{% assign x = false %}{% if x == true %}TRUE{% else %}FALSE{% endif %}", @"FALSE")]
        [InlineData(@"{% assign x = true %}{% if x %}TRUE{% else %}FALSE{% endif %}", @"TRUE")]
        [InlineData(@"{% assign x = false %}{% if x  %}TRUE{% else %}FALSE{% endif %}", @"FALSE")]
        [InlineData(@"{% if myundefined == true %}TRUE{% else %}FALSE{% endif %}", @"FALSE")]
        [InlineData(@"{% if myundefined == false %}TRUE{% else %}FALSE{% endif %}", @"FALSE")]
        [InlineData(@"{% if myundefined %}TRUE{% else %}FALSE{% endif %}", @"FALSE")]
        [InlineData(@"{% if myundefined %}TRUE{% else %}FALSE{% endif %}", @"FALSE")]
        [InlineData(@"{% if myundefined == null %}TRUE{% else %}FALSE{% endif %}", @"TRUE")]
        [InlineData(@"{% if ""myundefined"" == null %}TRUE{% else %}FALSE{% endif %}", @"FALSE")]
        [InlineData(@"{% assign x = """" %}{% if x == null %}TRUE{% else %}FALSE{% endif %}", @"FALSE")]
        [InlineData(@"{% assign x = null %}{% if x == null %}TRUE{% else %}FALSE{% endif %}", @"TRUE")]
        [InlineData(@"{% assign x = 0 %}{% if x == null %}TRUE{% else %}FALSE{% endif %}", @"FALSE")]
        [InlineData(@"{% if myundefined != null %}TRUE{% else %}FALSE{% endif %}", @"FALSE")]
        [InlineData(@"{% if ""myundefined"" != null %}TRUE{% else %}FALSE{% endif %}", @"TRUE")]
        public void It_Should_Match_Ruby_Output(String input, String expected) {

            // Arrange
            ITemplateContext ctx = new TemplateContext().WithAllFilters();
            var template = LiquidTemplate.Create(input);
        
            // Act
            String result = template.LiquidTemplate.Render(ctx).Result;
        
            // Assert
            Assert.Equal(expected, result);
        }

        [Theory]
        [InlineData(@"{% unknown_tag %}", @"Liquid syntax error: Unknown tag 'unknown_tag'")]
        public void It_Should_Capture_An_Error(String input, String expectedMessage) {

            // Arrange
            ITemplateContext ctx = new TemplateContext().WithAllFilters();

            var template = LiquidTemplate.Create(input);

            // Act
            var result = template.LiquidTemplate.Render(ctx);

            //var result = RenderingHelper.RenderTemplate(input, onRenderingError: err => errors.Add(err));

            Assert.Equal(1, result.RenderingErrors.Count);
            Assert.Contains(expectedMessage, result.RenderingErrors[0].ToString());
        }
        
    }
}
